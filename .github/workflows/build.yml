name: Build

on:
  workflow_dispatch:
  push:
    branches-ignore:
      - "update-dependencies-pr"
    paths:
      - ".github/workflows/build.yml"
      - "docker/**"
      - "*.sh"
  # pull_request:
  #   paths:
  #     - ".github/workflows/build.yml"
  #     - "docker/**"
  #     - "build.sh"

concurrency:
  group: test-${{ github.ref }}
  cancel-in-progress: true

env:
  REGION_ID: cn-beijing
  ACR_REGISTRY: registry.cn-beijing.aliyuncs.com
  ACR_NAMESPACE: oneflow
  DOCKER_HUB_NAMESPACE: oneflowinc

jobs:
  build_manylinux:
    name: ${{ matrix.policy }}_${{ matrix.platform }}_${{ matrix.tag-suffix }}
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        tag-suffix: ["cuda11.2"]
        include:
          - tag-suffix: "cuda11.2"
          - policy: "manylinux2014"
          - platform: "x86_64"
          - CUDA_BASE_IMAGE: "nvidia/cuda:11.2.2-cudnn8-devel-centos7"

    env:
      POLICY: ${{ matrix.policy }}
      PLATFORM: ${{ matrix.platform }}
      COMMIT_SHA: ${{ github.sha }}
      DOCKER_REPO: "${{ matrix.policy }}_${{ matrix.platform }}_${{ matrix.tag-suffix }}"
      TEST_TAG: ${{ matrix.policy }}_${{ matrix.platform }}_${{ matrix.tag-suffix }}:${{ github.sha }}
      CUDA_BASE_IMAGE: ${{ matrix.CUDA_BASE_IMAGE }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      # 1.1 Login to ACR
      - name: Login to ACR with the AccessKey pair
        uses: aliyun/acr-login@v1
        with:
          login-server: https://registry.${{env.REGION_ID}}.aliyuncs.com
          username: "${{ secrets.ACR_USERNAME }}"
          password: "${{ secrets.ACR_PASSWORD }}"
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up emulation
        if: matrix.platform == 'ppc64le'
        uses: docker/setup-qemu-action@v1
        with:
          platforms: ${{ matrix.platform }}

      # - name: Set BuildKit for ppc64le
      #   if: matrix.platform == 'ppc64le'
      #   run: echo 'MANYLINUX_BUILD_FRONTEND=buildkit' >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Setup cache
        uses: actions/cache@v2
        with:
          path: .buildx-cache-${{ matrix.policy }}_${{ matrix.platform }}/*
          key: buildx-cache-${{ matrix.policy }}-${{ matrix.platform }}-${{ matrix.tag-suffix }}-${{ hashFiles('docker/**') }}
          restore-keys: buildx-cache-${{ matrix.policy }}-${{ matrix.platform }}-${{ matrix.tag-suffix }}

      - name: Build
        run: ./build.sh
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: |
            ${{ env.DOCKER_HUB_NAMESPACE }}/${{ env.DOCKER_REPO }}:latest
            ${{ env.DOCKER_HUB_NAMESPACE }}/${{ env.DOCKER_REPO }}:${{ env.COMMIT_SHA }}
            ${{ env.ACR_REGISTRY }}/${{ env.ACR_NAMESPACE }}/${{ env.DOCKER_REPO }}:latest
            ${{ env.ACR_REGISTRY }}/${{ env.ACR_NAMESPACE }}/${{ env.DOCKER_REPO }}:${{ env.COMMIT_SHA }}
          cache-from: type=registry,ref=${{ env.DOCKER_HUB_NAMESPACE }}/${{ env.DOCKER_REPO }}:latest
          cache-to: type=inline
          context: ./docker/
          build-args: |
            POLICY
            PLATFORM
            BASEIMAGE
            DEVTOOLSET_ROOTPATH
            PREPEND_PATH
            LD_LIBRARY_PATH_ARG
      # - name: Push image to DockerHub
      #   run: |
      #     LATEST_TAG="${{ env.DOCKER_HUB_NAMESPACE }}/${{ env.DOCKER_REPO }}:latest"
      #     COMMIT_TAG="${{ env.DOCKER_HUB_NAMESPACE }}/${{ env.DOCKER_REPO }}:${{ env.COMMIT_SHA }}"
      #     docker tag ${{ env.TEST_TAG}} ${LATEST_TAG}
      #     docker tag ${{ env.TEST_TAG}} ${COMMIT_TAG}
      #     docker push ${LATEST_TAG}
      #     docker push ${COMMIT_TAG}
      # - name: Push image to ACR
      #   run: |
      #     LATEST_TAG="${{ env.ACR_REGISTRY }}/${{ env.ACR_NAMESPACE }}/${{ env.DOCKER_REPO }}:latest"
      #     COMMIT_TAG="${{ env.ACR_REGISTRY }}/${{ env.ACR_NAMESPACE }}/${{ env.DOCKER_REPO }}:${{ env.COMMIT_SHA }}"
      #     docker tag ${{ env.TEST_TAG}} ${LATEST_TAG}
      #     docker tag ${{ env.TEST_TAG}} ${COMMIT_TAG}
      #     docker push ${LATEST_TAG}
      #     docker push ${COMMIT_TAG}
